create sequence "public"."itineraries_id_seq";

create table "public"."contact_requests" (
    "id" uuid not null default gen_random_uuid(),
    "guide_id" uuid,
    "sender_name" text not null,
    "sender_email" text not null,
    "message" text not null,
    "created_at" timestamp with time zone default now()
);


alter table "public"."contact_requests" enable row level security;

create table "public"."guide_photos" (
    "id" bigint generated always as identity not null,
    "photo_url" text not null,
    "approved" boolean default false,
    "created_at" timestamp without time zone default now(),
    "guide_id" uuid
);


alter table "public"."guide_photos" enable row level security;

create table "public"."guides" (
    "id" uuid not null default gen_random_uuid(),
    "name" text,
    "email" text,
    "approved" boolean default false,
    "countries" text,
    "experience" text,
    "created_at" timestamp with time zone default now(),
    "languages" text,
    "description" text,
    "photograph" text,
    "user_id" uuid,
    "is_approved" boolean default false,
    "is_admin" boolean default false
);


alter table "public"."guides" enable row level security;

create table "public"."itineraries" (
    "id" bigint not null default nextval('itineraries_id_seq'::regclass),
    "title" text not null,
    "description" text,
    "approved" boolean default false,
    "created_at" timestamp with time zone default now(),
    "guide_id_backup" uuid,
    "guide_id" uuid
);


alter table "public"."itineraries" enable row level security;

create table "public"."itinerary_day_photos" (
    "id" bigint generated by default as identity not null,
    "day_id" bigint,
    "photo_url" text not null,
    "caption" text,
    "created_at" timestamp with time zone default now(),
    "approved" boolean default false
);


alter table "public"."itinerary_day_photos" enable row level security;

create table "public"."itinerary_days" (
    "id" bigint generated by default as identity not null,
    "itinerary_id" bigint,
    "day_number" integer not null,
    "title" text not null,
    "description" text,
    "created_at" timestamp with time zone default now()
);


alter table "public"."itinerary_days" enable row level security;

create table "public"."profiles" (
    "user_id" uuid not null,
    "role" text not null default 'guide'::text,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."profiles" enable row level security;

create table "public"."reviews" (
    "id" bigint generated always as identity not null,
    "user_id" uuid,
    "guide_id" uuid,
    "content" text not null,
    "rating" integer,
    "approved" boolean default false,
    "created_at" timestamp with time zone default now()
);


alter table "public"."reviews" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "email" text,
    "is_admin" boolean default false
);


alter table "public"."users" enable row level security;

alter sequence "public"."itineraries_id_seq" owned by "public"."itineraries"."id";

CREATE UNIQUE INDEX contact_requests_pkey ON public.contact_requests USING btree (id);

CREATE UNIQUE INDEX guide_photos_pkey ON public.guide_photos USING btree (id);

CREATE UNIQUE INDEX guides_pkey ON public.guides USING btree (id);

CREATE UNIQUE INDEX guides_user_unique ON public.guides USING btree (user_id);

CREATE UNIQUE INDEX itineraries_pkey ON public.itineraries USING btree (id);

CREATE UNIQUE INDEX itinerary_day_photos_pkey ON public.itinerary_day_photos USING btree (id);

CREATE UNIQUE INDEX itinerary_days_pkey ON public.itinerary_days USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (user_id);

CREATE UNIQUE INDEX reviews_pkey ON public.reviews USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."contact_requests" add constraint "contact_requests_pkey" PRIMARY KEY using index "contact_requests_pkey";

alter table "public"."guide_photos" add constraint "guide_photos_pkey" PRIMARY KEY using index "guide_photos_pkey";

alter table "public"."guides" add constraint "guides_pkey" PRIMARY KEY using index "guides_pkey";

alter table "public"."itineraries" add constraint "itineraries_pkey" PRIMARY KEY using index "itineraries_pkey";

alter table "public"."itinerary_day_photos" add constraint "itinerary_day_photos_pkey" PRIMARY KEY using index "itinerary_day_photos_pkey";

alter table "public"."itinerary_days" add constraint "itinerary_days_pkey" PRIMARY KEY using index "itinerary_days_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."reviews" add constraint "reviews_pkey" PRIMARY KEY using index "reviews_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."contact_requests" add constraint "contact_requests_guide_id_fkey" FOREIGN KEY (guide_id) REFERENCES guides(id) ON DELETE CASCADE not valid;

alter table "public"."contact_requests" validate constraint "contact_requests_guide_id_fkey";

alter table "public"."guide_photos" add constraint "guide_photos_guide_id_fkey" FOREIGN KEY (guide_id) REFERENCES guides(id) ON DELETE CASCADE not valid;

alter table "public"."guide_photos" validate constraint "guide_photos_guide_id_fkey";

alter table "public"."guides" add constraint "guides_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."guides" validate constraint "guides_user_id_fkey";

alter table "public"."guides" add constraint "guides_user_unique" UNIQUE using index "guides_user_unique";

alter table "public"."itinerary_day_photos" add constraint "itinerary_day_photos_day_id_fkey" FOREIGN KEY (day_id) REFERENCES itinerary_days(id) ON DELETE CASCADE not valid;

alter table "public"."itinerary_day_photos" validate constraint "itinerary_day_photos_day_id_fkey";

alter table "public"."itinerary_days" add constraint "itinerary_days_itinerary_id_fkey" FOREIGN KEY (itinerary_id) REFERENCES itineraries(id) ON DELETE CASCADE not valid;

alter table "public"."itinerary_days" validate constraint "itinerary_days_itinerary_id_fkey";

alter table "public"."profiles" add constraint "profiles_role_check" CHECK ((role = ANY (ARRAY['admin'::text, 'guide'::text]))) not valid;

alter table "public"."profiles" validate constraint "profiles_role_check";

alter table "public"."profiles" add constraint "profiles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_user_id_fkey";

alter table "public"."reviews" add constraint "reviews_rating_check" CHECK (((rating >= 1) AND (rating <= 5))) not valid;

alter table "public"."reviews" validate constraint "reviews_rating_check";

alter table "public"."reviews" add constraint "reviews_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_user_id_fkey";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "users_id_fkey";

set check_function_bodies = off;

create or replace view "public"."admin_guide_photos" as  SELECT id,
    photo_url,
    approved,
    created_at,
    guide_id
   FROM guide_photos;


create or replace view "public"."admin_guides" as  SELECT id,
    name,
    email,
    approved,
    countries,
    experience,
    created_at,
    languages,
    description,
    photograph,
    user_id,
    is_approved
   FROM guides;


create or replace view "public"."admin_itineraries" as  SELECT id,
    title,
    description,
    approved,
    created_at,
    guide_id_backup,
    guide_id
   FROM itineraries;


create or replace view "public"."admin_itinerary_day_photos" as  SELECT id,
    day_id,
    photo_url,
    caption,
    created_at,
    approved
   FROM itinerary_day_photos;


create or replace view "public"."admin_messages" as  SELECT id,
    guide_id,
    sender_name,
    sender_email,
    message,
    created_at
   FROM contact_requests;


create or replace view "public"."admin_reviews" as  SELECT id,
    user_id,
    guide_id,
    content,
    rating,
    approved,
    created_at
   FROM reviews;


CREATE OR REPLACE FUNCTION public.create_guide_on_signup()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.guides (user_id, name, email, is_approved)
  values (new.id, '', new.email, false);
  return new;
end;
$function$
;

create or replace view "public"."my_contact_requests" as  SELECT id,
    guide_id,
    sender_name,
    sender_email,
    message,
    created_at
   FROM contact_requests
  WHERE (guide_id IN ( SELECT guides.id
           FROM guides
          WHERE (guides.user_id = auth.uid())));


create or replace view "public"."my_guide_photos" as  SELECT id,
    photo_url,
    approved,
    created_at,
    guide_id
   FROM guide_photos
  WHERE (guide_id = ( SELECT guides.id
           FROM guides
          WHERE (guides.user_id = auth.uid())));


create or replace view "public"."my_guide_profile" as  SELECT id,
    name,
    email,
    approved,
    countries,
    experience,
    created_at,
    languages,
    description,
    photograph,
    user_id,
    is_approved
   FROM guides
  WHERE (user_id = auth.uid());


create or replace view "public"."my_itineraries" as  SELECT id,
    title,
    description,
    approved,
    created_at,
    guide_id_backup,
    guide_id
   FROM itineraries
  WHERE (guide_id = ( SELECT guides.id
           FROM guides
          WHERE (guides.user_id = auth.uid())));


create or replace view "public"."my_messages" as  SELECT id,
    guide_id,
    sender_name,
    sender_email,
    message,
    created_at
   FROM contact_requests
  WHERE (guide_id = ( SELECT guides.id
           FROM guides
          WHERE (guides.user_id = auth.uid())));


create or replace view "public"."my_reviews" as  SELECT r.id,
    r.user_id,
    r.guide_id,
    r.content,
    r.rating,
    r.approved,
    r.created_at
   FROM (reviews r
     JOIN guides g ON ((r.guide_id = g.id)))
  WHERE (g.user_id = auth.uid());


create or replace view "public"."public_guide_photos" as  SELECT id,
    guide_id,
    approved,
    created_at,
    photo_url
   FROM guide_photos
  WHERE (approved = true);


create or replace view "public"."public_itinerary_day_photos" as  SELECT p.id,
    p.day_id,
    p.photo_url,
    p.caption,
    p.created_at
   FROM ((itinerary_day_photos p
     JOIN itinerary_days d ON ((d.id = p.day_id)))
     JOIN itineraries i ON ((i.id = d.itinerary_id)))
  WHERE ((p.approved = true) AND (i.approved = true));


create or replace view "public"."public_published_guides" as  SELECT id,
    name,
    photograph,
    description,
    languages,
    countries,
    experience,
    approved,
    created_at
   FROM guides
  WHERE (approved IS TRUE);


create policy "Admin vidí všechny zprávy"
on "public"."contact_requests"
as permissive
for select
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Kdokoliv může napsat zprávu"
on "public"."contact_requests"
as permissive
for insert
to public
with check (true);


create policy "Průvodce vidí jen své zprávy"
on "public"."contact_requests"
as permissive
for select
to authenticated
using ((guide_id IN ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))));


create policy "Průvodce vidí své zprávy"
on "public"."contact_requests"
as permissive
for select
to authenticated
using ((guide_id IN ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))));


create policy "Admin má plný přístup k fotkám"
on "public"."guide_photos"
as permissive
for all
to public
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Admin spravuje fotky průvodců"
on "public"."guide_photos"
as permissive
for all
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text))
with check (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Admin spravuje všechny fotky"
on "public"."guide_photos"
as permissive
for all
to public
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text))
with check (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Průvodce může měnit vlastní fotky"
on "public"."guide_photos"
as permissive
for update
to authenticated
using ((EXISTS ( SELECT 1
   FROM guides g
  WHERE ((g.id = guide_photos.guide_id) AND (g.user_id = auth.uid())))));


create policy "Průvodce může nahrát fotku"
on "public"."guide_photos"
as permissive
for insert
to authenticated
with check ((EXISTS ( SELECT 1
   FROM guides g
  WHERE ((g.id = guide_photos.guide_id) AND (g.user_id = auth.uid())))));


create policy "Průvodce může číst vlastní fotky"
on "public"."guide_photos"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT 1
   FROM guides g
  WHERE ((g.id = guide_photos.guide_id) AND (g.user_id = auth.uid())))));


create policy "Průvodce upravuje své fotky"
on "public"."guide_photos"
as permissive
for update
to authenticated
using ((guide_id = ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))))
with check ((guide_id = ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))));


create policy "Průvodce vidí své fotky"
on "public"."guide_photos"
as permissive
for select
to authenticated
using ((guide_id = ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))));


create policy "Průvodce vkládá své fotky"
on "public"."guide_photos"
as permissive
for insert
to authenticated
with check ((guide_id = ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))));


create policy "admin_all_guide_photos"
on "public"."guide_photos"
as permissive
for all
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text))
with check (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "public_select_approved_photos"
on "public"."guide_photos"
as permissive
for select
to anon
using ((approved = true));


create policy "Admin can manage all guides"
on "public"."guides"
as permissive
for all
to authenticated
using ((auth.email() = 'zabaleny@panbatoh.cz'::text))
with check ((auth.email() = 'zabaleny@panbatoh.cz'::text));


create policy "Admin schvaluje průvodce"
on "public"."guides"
as permissive
for update
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text))
with check (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Admin vidí všechny průvodce"
on "public"."guides"
as permissive
for select
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Insert only via trigger"
on "public"."guides"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));


create policy "Každý vidí svůj profil"
on "public"."guides"
as permissive
for select
to authenticated
using ((user_id = auth.uid()));


create policy "Uživatel může upravovat své průvodce"
on "public"."guides"
as permissive
for update
to authenticated
using ((user_id = auth.uid()))
with check ((user_id = auth.uid()));


create policy "Uživatel může upravovat svůj profil"
on "public"."guides"
as permissive
for update
to authenticated
using ((user_id = auth.uid()))
with check ((user_id = auth.uid()));


create policy "Uživatel může vložit průvodce"
on "public"."guides"
as permissive
for insert
to authenticated
with check ((user_id = auth.uid()));


create policy "Uživatel může vytvořit 1 profil"
on "public"."guides"
as permissive
for insert
to authenticated
with check ((user_id = auth.uid()));


create policy "Uživatel čte své průvodce"
on "public"."guides"
as permissive
for select
to authenticated
using ((user_id = auth.uid()));


create policy "Veřejné čtení schválených průvodců"
on "public"."guides"
as permissive
for select
to public
using ((approved = true));


create policy "Admin full access"
on "public"."itineraries"
as permissive
for all
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text))
with check (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Admin spravuje itineráře"
on "public"."itineraries"
as permissive
for update
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text))
with check (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Admin vidí všechny itineráře"
on "public"."itineraries"
as permissive
for select
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Průvodce může upravit své itineráře"
on "public"."itineraries"
as permissive
for update
to authenticated
using ((guide_id = ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))))
with check ((guide_id = ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))));


create policy "Průvodce může vložit itinerář"
on "public"."itineraries"
as permissive
for insert
to authenticated
with check ((guide_id = ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))));


create policy "Průvodce vidí jen své itineráře"
on "public"."itineraries"
as permissive
for select
to authenticated
using ((guide_id = ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))));


create policy "Public can read approved itineraries"
on "public"."itineraries"
as permissive
for select
to anon
using ((approved = true));


create policy "guide_delete_own_itineraries"
on "public"."itineraries"
as permissive
for delete
to public
using ((auth.uid() = guide_id));


create policy "guide_insert_own_itineraries"
on "public"."itineraries"
as permissive
for insert
to public
with check ((auth.uid() = guide_id));


create policy "guide_read_own_itineraries"
on "public"."itineraries"
as permissive
for select
to public
using ((auth.uid() = guide_id));


create policy "public_read_approved_itineraries"
on "public"."itineraries"
as permissive
for select
to public
using ((approved = true));


create policy "Admin spravuje fotky itinerářů"
on "public"."itinerary_day_photos"
as permissive
for all
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text))
with check (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "admin_all_itinerary_day_photos"
on "public"."itinerary_day_photos"
as permissive
for all
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text))
with check (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "public_select_itinerary_day_photos"
on "public"."itinerary_day_photos"
as permissive
for select
to anon
using ((EXISTS ( SELECT 1
   FROM (itinerary_days d
     JOIN itineraries i ON ((i.id = d.itinerary_id)))
  WHERE ((d.id = itinerary_day_photos.day_id) AND (i.approved = true)))));


create policy "profiles_select_self"
on "public"."profiles"
as permissive
for select
to authenticated
using ((user_id = auth.uid()));


create policy "Admin can read all reviews"
on "public"."reviews"
as permissive
for select
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Admin can update all reviews"
on "public"."reviews"
as permissive
for update
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text))
with check (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Admin upravuje recenze"
on "public"."reviews"
as permissive
for update
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text))
with check (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Admin vidí všechny recenze"
on "public"."reviews"
as permissive
for select
to authenticated
using (((auth.jwt() ->> 'email'::text) = 'zabaleny@panbatoh.cz'::text));


create policy "Průvodce vidí jen své recenze"
on "public"."reviews"
as permissive
for select
to authenticated
using ((guide_id IN ( SELECT guides.id
   FROM guides
  WHERE (guides.user_id = auth.uid()))));


create policy "Public can read approved reviews"
on "public"."reviews"
as permissive
for select
to anon, authenticated
using ((approved = true));


create policy "User can insert review"
on "public"."reviews"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));


create policy "Admins can read everything"
on "public"."users"
as permissive
for select
to public
using ((is_admin = true));


create policy "Users can read their own data"
on "public"."users"
as permissive
for select
to public
using ((auth.uid() = id));



CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION create_guide_on_signup();


  create policy "Allow authenticated delete"
  on "storage"."objects"
  as permissive
  for delete
  to public
using (((bucket_id = 'guide-profile-images'::text) AND (auth.role() = 'authenticated'::text)));



  create policy "Allow authenticated update"
  on "storage"."objects"
  as permissive
  for update
  to public
using (((bucket_id = 'guide-profile-images'::text) AND (auth.role() = 'authenticated'::text)));



  create policy "Allow authenticated upload"
  on "storage"."objects"
  as permissive
  for insert
  to public
with check (((bucket_id = 'guide-profile-images'::text) AND (auth.role() = 'authenticated'::text)));



  create policy "Allow public read"
  on "storage"."objects"
  as permissive
  for select
  to public
using ((bucket_id = 'guide-profile-images'::text));



  create policy "Anyone can view photos"
  on "storage"."objects"
  as permissive
  for select
  to public
using ((bucket_id = 'itinerary-photos'::text));



  create policy "Give anon users access to JPG images in folder 1io9m69_0"
  on "storage"."objects"
  as permissive
  for insert
  to public
with check ((bucket_id = 'photos'::text));



  create policy "Guides can upload photos"
  on "storage"."objects"
  as permissive
  for insert
  to authenticated
with check ((bucket_id = 'itinerary-photos'::text));



  create policy "Owner can delete own photos"
  on "storage"."objects"
  as permissive
  for delete
  to authenticated
using (((bucket_id = 'itinerary-photos'::text) AND (owner = auth.uid())));



